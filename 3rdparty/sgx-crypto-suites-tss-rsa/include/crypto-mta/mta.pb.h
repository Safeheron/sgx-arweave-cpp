// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-zkp/zkp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mta_2eproto;
namespace safeheron {
namespace proto {
class MtaMessageB;
class MtaMessageBDefaultTypeInternal;
extern MtaMessageBDefaultTypeInternal _MtaMessageB_default_instance_;
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::MtaMessageB* Arena::CreateMaybeMessage<::safeheron::proto::MtaMessageB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {

// ===================================================================

class MtaMessageB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.MtaMessageB) */ {
 public:
  inline MtaMessageB() : MtaMessageB(nullptr) {}
  virtual ~MtaMessageB();

  MtaMessageB(const MtaMessageB& from);
  MtaMessageB(MtaMessageB&& from) noexcept
    : MtaMessageB() {
    *this = ::std::move(from);
  }

  inline MtaMessageB& operator=(const MtaMessageB& from) {
    CopyFrom(from);
    return *this;
  }
  inline MtaMessageB& operator=(MtaMessageB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MtaMessageB& default_instance();

  static inline const MtaMessageB* internal_default_instance() {
    return reinterpret_cast<const MtaMessageB*>(
               &_MtaMessageB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MtaMessageB& a, MtaMessageB& b) {
    a.Swap(&b);
  }
  inline void Swap(MtaMessageB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MtaMessageB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MtaMessageB* New() const final {
    return CreateMaybeMessage<MtaMessageB>(nullptr);
  }

  MtaMessageB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MtaMessageB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MtaMessageB& from);
  void MergeFrom(const MtaMessageB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MtaMessageB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.MtaMessageB";
  }
  protected:
  explicit MtaMessageB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mta_2eproto);
    return ::descriptor_table_mta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCBFieldNumber = 1,
    kDlogProofBFieldNumber = 2,
    kDlogProofBetaTagFieldNumber = 3,
  };
  // string c_b = 1;
  void clear_c_b();
  const std::string& c_b() const;
  void set_c_b(const std::string& value);
  void set_c_b(std::string&& value);
  void set_c_b(const char* value);
  void set_c_b(const char* value, size_t size);
  std::string* mutable_c_b();
  std::string* release_c_b();
  void set_allocated_c_b(std::string* c_b);
  private:
  const std::string& _internal_c_b() const;
  void _internal_set_c_b(const std::string& value);
  std::string* _internal_mutable_c_b();
  public:

  // .safeheron.proto.DLogProof dlog_proof_b = 2;
  bool has_dlog_proof_b() const;
  private:
  bool _internal_has_dlog_proof_b() const;
  public:
  void clear_dlog_proof_b();
  const ::safeheron::proto::DLogProof& dlog_proof_b() const;
  ::safeheron::proto::DLogProof* release_dlog_proof_b();
  ::safeheron::proto::DLogProof* mutable_dlog_proof_b();
  void set_allocated_dlog_proof_b(::safeheron::proto::DLogProof* dlog_proof_b);
  private:
  const ::safeheron::proto::DLogProof& _internal_dlog_proof_b() const;
  ::safeheron::proto::DLogProof* _internal_mutable_dlog_proof_b();
  public:
  void unsafe_arena_set_allocated_dlog_proof_b(
      ::safeheron::proto::DLogProof* dlog_proof_b);
  ::safeheron::proto::DLogProof* unsafe_arena_release_dlog_proof_b();

  // .safeheron.proto.DLogProof dlog_proof_beta_tag = 3;
  bool has_dlog_proof_beta_tag() const;
  private:
  bool _internal_has_dlog_proof_beta_tag() const;
  public:
  void clear_dlog_proof_beta_tag();
  const ::safeheron::proto::DLogProof& dlog_proof_beta_tag() const;
  ::safeheron::proto::DLogProof* release_dlog_proof_beta_tag();
  ::safeheron::proto::DLogProof* mutable_dlog_proof_beta_tag();
  void set_allocated_dlog_proof_beta_tag(::safeheron::proto::DLogProof* dlog_proof_beta_tag);
  private:
  const ::safeheron::proto::DLogProof& _internal_dlog_proof_beta_tag() const;
  ::safeheron::proto::DLogProof* _internal_mutable_dlog_proof_beta_tag();
  public:
  void unsafe_arena_set_allocated_dlog_proof_beta_tag(
      ::safeheron::proto::DLogProof* dlog_proof_beta_tag);
  ::safeheron::proto::DLogProof* unsafe_arena_release_dlog_proof_beta_tag();

  // @@protoc_insertion_point(class_scope:safeheron.proto.MtaMessageB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_b_;
  ::safeheron::proto::DLogProof* dlog_proof_b_;
  ::safeheron::proto::DLogProof* dlog_proof_beta_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MtaMessageB

// string c_b = 1;
inline void MtaMessageB::clear_c_b() {
  c_b_.ClearToEmpty();
}
inline const std::string& MtaMessageB::c_b() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.MtaMessageB.c_b)
  return _internal_c_b();
}
inline void MtaMessageB::set_c_b(const std::string& value) {
  _internal_set_c_b(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.MtaMessageB.c_b)
}
inline std::string* MtaMessageB::mutable_c_b() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.MtaMessageB.c_b)
  return _internal_mutable_c_b();
}
inline const std::string& MtaMessageB::_internal_c_b() const {
  return c_b_.Get();
}
inline void MtaMessageB::_internal_set_c_b(const std::string& value) {
  
  c_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MtaMessageB::set_c_b(std::string&& value) {
  
  c_b_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.MtaMessageB.c_b)
}
inline void MtaMessageB::set_c_b(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.MtaMessageB.c_b)
}
inline void MtaMessageB::set_c_b(const char* value,
    size_t size) {
  
  c_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.MtaMessageB.c_b)
}
inline std::string* MtaMessageB::_internal_mutable_c_b() {
  
  return c_b_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MtaMessageB::release_c_b() {
  // @@protoc_insertion_point(field_release:safeheron.proto.MtaMessageB.c_b)
  return c_b_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MtaMessageB::set_allocated_c_b(std::string* c_b) {
  if (c_b != nullptr) {
    
  } else {
    
  }
  c_b_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c_b,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.MtaMessageB.c_b)
}

// .safeheron.proto.DLogProof dlog_proof_b = 2;
inline bool MtaMessageB::_internal_has_dlog_proof_b() const {
  return this != internal_default_instance() && dlog_proof_b_ != nullptr;
}
inline bool MtaMessageB::has_dlog_proof_b() const {
  return _internal_has_dlog_proof_b();
}
inline const ::safeheron::proto::DLogProof& MtaMessageB::_internal_dlog_proof_b() const {
  const ::safeheron::proto::DLogProof* p = dlog_proof_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof&>(
      ::safeheron::proto::_DLogProof_default_instance_);
}
inline const ::safeheron::proto::DLogProof& MtaMessageB::dlog_proof_b() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.MtaMessageB.dlog_proof_b)
  return _internal_dlog_proof_b();
}
inline void MtaMessageB::unsafe_arena_set_allocated_dlog_proof_b(
    ::safeheron::proto::DLogProof* dlog_proof_b) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_b_);
  }
  dlog_proof_b_ = dlog_proof_b;
  if (dlog_proof_b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.MtaMessageB.dlog_proof_b)
}
inline ::safeheron::proto::DLogProof* MtaMessageB::release_dlog_proof_b() {
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_b_;
  dlog_proof_b_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::DLogProof* MtaMessageB::unsafe_arena_release_dlog_proof_b() {
  // @@protoc_insertion_point(field_release:safeheron.proto.MtaMessageB.dlog_proof_b)
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_b_;
  dlog_proof_b_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof* MtaMessageB::_internal_mutable_dlog_proof_b() {
  
  if (dlog_proof_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof>(GetArena());
    dlog_proof_b_ = p;
  }
  return dlog_proof_b_;
}
inline ::safeheron::proto::DLogProof* MtaMessageB::mutable_dlog_proof_b() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.MtaMessageB.dlog_proof_b)
  return _internal_mutable_dlog_proof_b();
}
inline void MtaMessageB::set_allocated_dlog_proof_b(::safeheron::proto::DLogProof* dlog_proof_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_b_);
  }
  if (dlog_proof_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_b)->GetArena();
    if (message_arena != submessage_arena) {
      dlog_proof_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dlog_proof_b, submessage_arena);
    }
    
  } else {
    
  }
  dlog_proof_b_ = dlog_proof_b;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.MtaMessageB.dlog_proof_b)
}

// .safeheron.proto.DLogProof dlog_proof_beta_tag = 3;
inline bool MtaMessageB::_internal_has_dlog_proof_beta_tag() const {
  return this != internal_default_instance() && dlog_proof_beta_tag_ != nullptr;
}
inline bool MtaMessageB::has_dlog_proof_beta_tag() const {
  return _internal_has_dlog_proof_beta_tag();
}
inline const ::safeheron::proto::DLogProof& MtaMessageB::_internal_dlog_proof_beta_tag() const {
  const ::safeheron::proto::DLogProof* p = dlog_proof_beta_tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof&>(
      ::safeheron::proto::_DLogProof_default_instance_);
}
inline const ::safeheron::proto::DLogProof& MtaMessageB::dlog_proof_beta_tag() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.MtaMessageB.dlog_proof_beta_tag)
  return _internal_dlog_proof_beta_tag();
}
inline void MtaMessageB::unsafe_arena_set_allocated_dlog_proof_beta_tag(
    ::safeheron::proto::DLogProof* dlog_proof_beta_tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_beta_tag_);
  }
  dlog_proof_beta_tag_ = dlog_proof_beta_tag;
  if (dlog_proof_beta_tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.MtaMessageB.dlog_proof_beta_tag)
}
inline ::safeheron::proto::DLogProof* MtaMessageB::release_dlog_proof_beta_tag() {
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_beta_tag_;
  dlog_proof_beta_tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::DLogProof* MtaMessageB::unsafe_arena_release_dlog_proof_beta_tag() {
  // @@protoc_insertion_point(field_release:safeheron.proto.MtaMessageB.dlog_proof_beta_tag)
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_beta_tag_;
  dlog_proof_beta_tag_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof* MtaMessageB::_internal_mutable_dlog_proof_beta_tag() {
  
  if (dlog_proof_beta_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof>(GetArena());
    dlog_proof_beta_tag_ = p;
  }
  return dlog_proof_beta_tag_;
}
inline ::safeheron::proto::DLogProof* MtaMessageB::mutable_dlog_proof_beta_tag() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.MtaMessageB.dlog_proof_beta_tag)
  return _internal_mutable_dlog_proof_beta_tag();
}
inline void MtaMessageB::set_allocated_dlog_proof_beta_tag(::safeheron::proto::DLogProof* dlog_proof_beta_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_beta_tag_);
  }
  if (dlog_proof_beta_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_beta_tag)->GetArena();
    if (message_arena != submessage_arena) {
      dlog_proof_beta_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dlog_proof_beta_tag, submessage_arena);
    }
    
  } else {
    
  }
  dlog_proof_beta_tag_ = dlog_proof_beta_tag;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.MtaMessageB.dlog_proof_beta_tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mta_2eproto
