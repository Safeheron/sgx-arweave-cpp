// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paillier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_paillier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_paillier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_paillier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_paillier_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_paillier_2eproto;
namespace safeheron {
namespace proto {
class PailPriv;
class PailPrivDefaultTypeInternal;
extern PailPrivDefaultTypeInternal _PailPriv_default_instance_;
class PailPub;
class PailPubDefaultTypeInternal;
extern PailPubDefaultTypeInternal _PailPub_default_instance_;
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::PailPriv* Arena::CreateMaybeMessage<::safeheron::proto::PailPriv>(Arena*);
template<> ::safeheron::proto::PailPub* Arena::CreateMaybeMessage<::safeheron::proto::PailPub>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {

// ===================================================================

class PailPub PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.PailPub) */ {
 public:
  inline PailPub() : PailPub(nullptr) {}
  virtual ~PailPub();

  PailPub(const PailPub& from);
  PailPub(PailPub&& from) noexcept
    : PailPub() {
    *this = ::std::move(from);
  }

  inline PailPub& operator=(const PailPub& from) {
    CopyFrom(from);
    return *this;
  }
  inline PailPub& operator=(PailPub&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PailPub& default_instance();

  static inline const PailPub* internal_default_instance() {
    return reinterpret_cast<const PailPub*>(
               &_PailPub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PailPub& a, PailPub& b) {
    a.Swap(&b);
  }
  inline void Swap(PailPub* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PailPub* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PailPub* New() const final {
    return CreateMaybeMessage<PailPub>(nullptr);
  }

  PailPub* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PailPub>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PailPub& from);
  void MergeFrom(const PailPub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PailPub* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.PailPub";
  }
  protected:
  explicit PailPub(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paillier_2eproto);
    return ::descriptor_table_paillier_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
    kGFieldNumber = 2,
  };
  // string n = 1;
  void clear_n();
  const std::string& n() const;
  void set_n(const std::string& value);
  void set_n(std::string&& value);
  void set_n(const char* value);
  void set_n(const char* value, size_t size);
  std::string* mutable_n();
  std::string* release_n();
  void set_allocated_n(std::string* n);
  private:
  const std::string& _internal_n() const;
  void _internal_set_n(const std::string& value);
  std::string* _internal_mutable_n();
  public:

  // string g = 2;
  void clear_g();
  const std::string& g() const;
  void set_g(const std::string& value);
  void set_g(std::string&& value);
  void set_g(const char* value);
  void set_g(const char* value, size_t size);
  std::string* mutable_g();
  std::string* release_g();
  void set_allocated_g(std::string* g);
  private:
  const std::string& _internal_g() const;
  void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.PailPub)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paillier_2eproto;
};
// -------------------------------------------------------------------

class PailPriv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.PailPriv) */ {
 public:
  inline PailPriv() : PailPriv(nullptr) {}
  virtual ~PailPriv();

  PailPriv(const PailPriv& from);
  PailPriv(PailPriv&& from) noexcept
    : PailPriv() {
    *this = ::std::move(from);
  }

  inline PailPriv& operator=(const PailPriv& from) {
    CopyFrom(from);
    return *this;
  }
  inline PailPriv& operator=(PailPriv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PailPriv& default_instance();

  static inline const PailPriv* internal_default_instance() {
    return reinterpret_cast<const PailPriv*>(
               &_PailPriv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PailPriv& a, PailPriv& b) {
    a.Swap(&b);
  }
  inline void Swap(PailPriv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PailPriv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PailPriv* New() const final {
    return CreateMaybeMessage<PailPriv>(nullptr);
  }

  PailPriv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PailPriv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PailPriv& from);
  void MergeFrom(const PailPriv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PailPriv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.PailPriv";
  }
  protected:
  explicit PailPriv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paillier_2eproto);
    return ::descriptor_table_paillier_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
    kLambdaFieldNumber = 2,
    kMuFieldNumber = 3,
    kPFieldNumber = 4,
    kQFieldNumber = 5,
    kPSqrFieldNumber = 6,
    kQSqrFieldNumber = 7,
    kPMinus1FieldNumber = 8,
    kQMinus1FieldNumber = 9,
    kHpFieldNumber = 10,
    kHqFieldNumber = 11,
    kQInvPFieldNumber = 12,
    kPInvQFieldNumber = 13,
  };
  // string n = 1;
  void clear_n();
  const std::string& n() const;
  void set_n(const std::string& value);
  void set_n(std::string&& value);
  void set_n(const char* value);
  void set_n(const char* value, size_t size);
  std::string* mutable_n();
  std::string* release_n();
  void set_allocated_n(std::string* n);
  private:
  const std::string& _internal_n() const;
  void _internal_set_n(const std::string& value);
  std::string* _internal_mutable_n();
  public:

  // string lambda = 2;
  void clear_lambda();
  const std::string& lambda() const;
  void set_lambda(const std::string& value);
  void set_lambda(std::string&& value);
  void set_lambda(const char* value);
  void set_lambda(const char* value, size_t size);
  std::string* mutable_lambda();
  std::string* release_lambda();
  void set_allocated_lambda(std::string* lambda);
  private:
  const std::string& _internal_lambda() const;
  void _internal_set_lambda(const std::string& value);
  std::string* _internal_mutable_lambda();
  public:

  // string mu = 3;
  void clear_mu();
  const std::string& mu() const;
  void set_mu(const std::string& value);
  void set_mu(std::string&& value);
  void set_mu(const char* value);
  void set_mu(const char* value, size_t size);
  std::string* mutable_mu();
  std::string* release_mu();
  void set_allocated_mu(std::string* mu);
  private:
  const std::string& _internal_mu() const;
  void _internal_set_mu(const std::string& value);
  std::string* _internal_mutable_mu();
  public:

  // string p = 4;
  void clear_p();
  const std::string& p() const;
  void set_p(const std::string& value);
  void set_p(std::string&& value);
  void set_p(const char* value);
  void set_p(const char* value, size_t size);
  std::string* mutable_p();
  std::string* release_p();
  void set_allocated_p(std::string* p);
  private:
  const std::string& _internal_p() const;
  void _internal_set_p(const std::string& value);
  std::string* _internal_mutable_p();
  public:

  // string q = 5;
  void clear_q();
  const std::string& q() const;
  void set_q(const std::string& value);
  void set_q(std::string&& value);
  void set_q(const char* value);
  void set_q(const char* value, size_t size);
  std::string* mutable_q();
  std::string* release_q();
  void set_allocated_q(std::string* q);
  private:
  const std::string& _internal_q() const;
  void _internal_set_q(const std::string& value);
  std::string* _internal_mutable_q();
  public:

  // string pSqr = 6;
  void clear_psqr();
  const std::string& psqr() const;
  void set_psqr(const std::string& value);
  void set_psqr(std::string&& value);
  void set_psqr(const char* value);
  void set_psqr(const char* value, size_t size);
  std::string* mutable_psqr();
  std::string* release_psqr();
  void set_allocated_psqr(std::string* psqr);
  private:
  const std::string& _internal_psqr() const;
  void _internal_set_psqr(const std::string& value);
  std::string* _internal_mutable_psqr();
  public:

  // string qSqr = 7;
  void clear_qsqr();
  const std::string& qsqr() const;
  void set_qsqr(const std::string& value);
  void set_qsqr(std::string&& value);
  void set_qsqr(const char* value);
  void set_qsqr(const char* value, size_t size);
  std::string* mutable_qsqr();
  std::string* release_qsqr();
  void set_allocated_qsqr(std::string* qsqr);
  private:
  const std::string& _internal_qsqr() const;
  void _internal_set_qsqr(const std::string& value);
  std::string* _internal_mutable_qsqr();
  public:

  // string pMinus1 = 8;
  void clear_pminus1();
  const std::string& pminus1() const;
  void set_pminus1(const std::string& value);
  void set_pminus1(std::string&& value);
  void set_pminus1(const char* value);
  void set_pminus1(const char* value, size_t size);
  std::string* mutable_pminus1();
  std::string* release_pminus1();
  void set_allocated_pminus1(std::string* pminus1);
  private:
  const std::string& _internal_pminus1() const;
  void _internal_set_pminus1(const std::string& value);
  std::string* _internal_mutable_pminus1();
  public:

  // string qMinus1 = 9;
  void clear_qminus1();
  const std::string& qminus1() const;
  void set_qminus1(const std::string& value);
  void set_qminus1(std::string&& value);
  void set_qminus1(const char* value);
  void set_qminus1(const char* value, size_t size);
  std::string* mutable_qminus1();
  std::string* release_qminus1();
  void set_allocated_qminus1(std::string* qminus1);
  private:
  const std::string& _internal_qminus1() const;
  void _internal_set_qminus1(const std::string& value);
  std::string* _internal_mutable_qminus1();
  public:

  // string hp = 10;
  void clear_hp();
  const std::string& hp() const;
  void set_hp(const std::string& value);
  void set_hp(std::string&& value);
  void set_hp(const char* value);
  void set_hp(const char* value, size_t size);
  std::string* mutable_hp();
  std::string* release_hp();
  void set_allocated_hp(std::string* hp);
  private:
  const std::string& _internal_hp() const;
  void _internal_set_hp(const std::string& value);
  std::string* _internal_mutable_hp();
  public:

  // string hq = 11;
  void clear_hq();
  const std::string& hq() const;
  void set_hq(const std::string& value);
  void set_hq(std::string&& value);
  void set_hq(const char* value);
  void set_hq(const char* value, size_t size);
  std::string* mutable_hq();
  std::string* release_hq();
  void set_allocated_hq(std::string* hq);
  private:
  const std::string& _internal_hq() const;
  void _internal_set_hq(const std::string& value);
  std::string* _internal_mutable_hq();
  public:

  // string qInvP = 12;
  void clear_qinvp();
  const std::string& qinvp() const;
  void set_qinvp(const std::string& value);
  void set_qinvp(std::string&& value);
  void set_qinvp(const char* value);
  void set_qinvp(const char* value, size_t size);
  std::string* mutable_qinvp();
  std::string* release_qinvp();
  void set_allocated_qinvp(std::string* qinvp);
  private:
  const std::string& _internal_qinvp() const;
  void _internal_set_qinvp(const std::string& value);
  std::string* _internal_mutable_qinvp();
  public:

  // string pInvQ = 13;
  void clear_pinvq();
  const std::string& pinvq() const;
  void set_pinvq(const std::string& value);
  void set_pinvq(std::string&& value);
  void set_pinvq(const char* value);
  void set_pinvq(const char* value, size_t size);
  std::string* mutable_pinvq();
  std::string* release_pinvq();
  void set_allocated_pinvq(std::string* pinvq);
  private:
  const std::string& _internal_pinvq() const;
  void _internal_set_pinvq(const std::string& value);
  std::string* _internal_mutable_pinvq();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.PailPriv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lambda_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr q_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psqr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qsqr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pminus1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qminus1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qinvp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pinvq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paillier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PailPub

// string n = 1;
inline void PailPub::clear_n() {
  n_.ClearToEmpty();
}
inline const std::string& PailPub::n() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPub.n)
  return _internal_n();
}
inline void PailPub::set_n(const std::string& value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPub.n)
}
inline std::string* PailPub::mutable_n() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPub.n)
  return _internal_mutable_n();
}
inline const std::string& PailPub::_internal_n() const {
  return n_.Get();
}
inline void PailPub::_internal_set_n(const std::string& value) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPub::set_n(std::string&& value) {
  
  n_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPub.n)
}
inline void PailPub::set_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPub.n)
}
inline void PailPub::set_n(const char* value,
    size_t size) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPub.n)
}
inline std::string* PailPub::_internal_mutable_n() {
  
  return n_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPub::release_n() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPub.n)
  return n_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPub::set_allocated_n(std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPub.n)
}

// string g = 2;
inline void PailPub::clear_g() {
  g_.ClearToEmpty();
}
inline const std::string& PailPub::g() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPub.g)
  return _internal_g();
}
inline void PailPub::set_g(const std::string& value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPub.g)
}
inline std::string* PailPub::mutable_g() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPub.g)
  return _internal_mutable_g();
}
inline const std::string& PailPub::_internal_g() const {
  return g_.Get();
}
inline void PailPub::_internal_set_g(const std::string& value) {
  
  g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPub::set_g(std::string&& value) {
  
  g_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPub.g)
}
inline void PailPub::set_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPub.g)
}
inline void PailPub::set_g(const char* value,
    size_t size) {
  
  g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPub.g)
}
inline std::string* PailPub::_internal_mutable_g() {
  
  return g_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPub::release_g() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPub.g)
  return g_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPub::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    
  } else {
    
  }
  g_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPub.g)
}

// -------------------------------------------------------------------

// PailPriv

// string n = 1;
inline void PailPriv::clear_n() {
  n_.ClearToEmpty();
}
inline const std::string& PailPriv::n() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.n)
  return _internal_n();
}
inline void PailPriv::set_n(const std::string& value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.n)
}
inline std::string* PailPriv::mutable_n() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.n)
  return _internal_mutable_n();
}
inline const std::string& PailPriv::_internal_n() const {
  return n_.Get();
}
inline void PailPriv::_internal_set_n(const std::string& value) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_n(std::string&& value) {
  
  n_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.n)
}
inline void PailPriv::set_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.n)
}
inline void PailPriv::set_n(const char* value,
    size_t size) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.n)
}
inline std::string* PailPriv::_internal_mutable_n() {
  
  return n_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_n() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.n)
  return n_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_n(std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.n)
}

// string lambda = 2;
inline void PailPriv::clear_lambda() {
  lambda_.ClearToEmpty();
}
inline const std::string& PailPriv::lambda() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.lambda)
  return _internal_lambda();
}
inline void PailPriv::set_lambda(const std::string& value) {
  _internal_set_lambda(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.lambda)
}
inline std::string* PailPriv::mutable_lambda() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.lambda)
  return _internal_mutable_lambda();
}
inline const std::string& PailPriv::_internal_lambda() const {
  return lambda_.Get();
}
inline void PailPriv::_internal_set_lambda(const std::string& value) {
  
  lambda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_lambda(std::string&& value) {
  
  lambda_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.lambda)
}
inline void PailPriv::set_lambda(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lambda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.lambda)
}
inline void PailPriv::set_lambda(const char* value,
    size_t size) {
  
  lambda_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.lambda)
}
inline std::string* PailPriv::_internal_mutable_lambda() {
  
  return lambda_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_lambda() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.lambda)
  return lambda_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_lambda(std::string* lambda) {
  if (lambda != nullptr) {
    
  } else {
    
  }
  lambda_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lambda,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.lambda)
}

// string mu = 3;
inline void PailPriv::clear_mu() {
  mu_.ClearToEmpty();
}
inline const std::string& PailPriv::mu() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.mu)
  return _internal_mu();
}
inline void PailPriv::set_mu(const std::string& value) {
  _internal_set_mu(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.mu)
}
inline std::string* PailPriv::mutable_mu() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.mu)
  return _internal_mutable_mu();
}
inline const std::string& PailPriv::_internal_mu() const {
  return mu_.Get();
}
inline void PailPriv::_internal_set_mu(const std::string& value) {
  
  mu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_mu(std::string&& value) {
  
  mu_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.mu)
}
inline void PailPriv::set_mu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.mu)
}
inline void PailPriv::set_mu(const char* value,
    size_t size) {
  
  mu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.mu)
}
inline std::string* PailPriv::_internal_mutable_mu() {
  
  return mu_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_mu() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.mu)
  return mu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_mu(std::string* mu) {
  if (mu != nullptr) {
    
  } else {
    
  }
  mu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mu,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.mu)
}

// string p = 4;
inline void PailPriv::clear_p() {
  p_.ClearToEmpty();
}
inline const std::string& PailPriv::p() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.p)
  return _internal_p();
}
inline void PailPriv::set_p(const std::string& value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.p)
}
inline std::string* PailPriv::mutable_p() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.p)
  return _internal_mutable_p();
}
inline const std::string& PailPriv::_internal_p() const {
  return p_.Get();
}
inline void PailPriv::_internal_set_p(const std::string& value) {
  
  p_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_p(std::string&& value) {
  
  p_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.p)
}
inline void PailPriv::set_p(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  p_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.p)
}
inline void PailPriv::set_p(const char* value,
    size_t size) {
  
  p_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.p)
}
inline std::string* PailPriv::_internal_mutable_p() {
  
  return p_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_p() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.p)
  return p_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_p(std::string* p) {
  if (p != nullptr) {
    
  } else {
    
  }
  p_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.p)
}

// string q = 5;
inline void PailPriv::clear_q() {
  q_.ClearToEmpty();
}
inline const std::string& PailPriv::q() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.q)
  return _internal_q();
}
inline void PailPriv::set_q(const std::string& value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.q)
}
inline std::string* PailPriv::mutable_q() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.q)
  return _internal_mutable_q();
}
inline const std::string& PailPriv::_internal_q() const {
  return q_.Get();
}
inline void PailPriv::_internal_set_q(const std::string& value) {
  
  q_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_q(std::string&& value) {
  
  q_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.q)
}
inline void PailPriv::set_q(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  q_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.q)
}
inline void PailPriv::set_q(const char* value,
    size_t size) {
  
  q_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.q)
}
inline std::string* PailPriv::_internal_mutable_q() {
  
  return q_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_q() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.q)
  return q_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_q(std::string* q) {
  if (q != nullptr) {
    
  } else {
    
  }
  q_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), q,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.q)
}

// string pSqr = 6;
inline void PailPriv::clear_psqr() {
  psqr_.ClearToEmpty();
}
inline const std::string& PailPriv::psqr() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.pSqr)
  return _internal_psqr();
}
inline void PailPriv::set_psqr(const std::string& value) {
  _internal_set_psqr(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.pSqr)
}
inline std::string* PailPriv::mutable_psqr() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.pSqr)
  return _internal_mutable_psqr();
}
inline const std::string& PailPriv::_internal_psqr() const {
  return psqr_.Get();
}
inline void PailPriv::_internal_set_psqr(const std::string& value) {
  
  psqr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_psqr(std::string&& value) {
  
  psqr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.pSqr)
}
inline void PailPriv::set_psqr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  psqr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.pSqr)
}
inline void PailPriv::set_psqr(const char* value,
    size_t size) {
  
  psqr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.pSqr)
}
inline std::string* PailPriv::_internal_mutable_psqr() {
  
  return psqr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_psqr() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.pSqr)
  return psqr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_psqr(std::string* psqr) {
  if (psqr != nullptr) {
    
  } else {
    
  }
  psqr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psqr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.pSqr)
}

// string qSqr = 7;
inline void PailPriv::clear_qsqr() {
  qsqr_.ClearToEmpty();
}
inline const std::string& PailPriv::qsqr() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.qSqr)
  return _internal_qsqr();
}
inline void PailPriv::set_qsqr(const std::string& value) {
  _internal_set_qsqr(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.qSqr)
}
inline std::string* PailPriv::mutable_qsqr() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.qSqr)
  return _internal_mutable_qsqr();
}
inline const std::string& PailPriv::_internal_qsqr() const {
  return qsqr_.Get();
}
inline void PailPriv::_internal_set_qsqr(const std::string& value) {
  
  qsqr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_qsqr(std::string&& value) {
  
  qsqr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.qSqr)
}
inline void PailPriv::set_qsqr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qsqr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.qSqr)
}
inline void PailPriv::set_qsqr(const char* value,
    size_t size) {
  
  qsqr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.qSqr)
}
inline std::string* PailPriv::_internal_mutable_qsqr() {
  
  return qsqr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_qsqr() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.qSqr)
  return qsqr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_qsqr(std::string* qsqr) {
  if (qsqr != nullptr) {
    
  } else {
    
  }
  qsqr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qsqr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.qSqr)
}

// string pMinus1 = 8;
inline void PailPriv::clear_pminus1() {
  pminus1_.ClearToEmpty();
}
inline const std::string& PailPriv::pminus1() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.pMinus1)
  return _internal_pminus1();
}
inline void PailPriv::set_pminus1(const std::string& value) {
  _internal_set_pminus1(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.pMinus1)
}
inline std::string* PailPriv::mutable_pminus1() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.pMinus1)
  return _internal_mutable_pminus1();
}
inline const std::string& PailPriv::_internal_pminus1() const {
  return pminus1_.Get();
}
inline void PailPriv::_internal_set_pminus1(const std::string& value) {
  
  pminus1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_pminus1(std::string&& value) {
  
  pminus1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.pMinus1)
}
inline void PailPriv::set_pminus1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pminus1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.pMinus1)
}
inline void PailPriv::set_pminus1(const char* value,
    size_t size) {
  
  pminus1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.pMinus1)
}
inline std::string* PailPriv::_internal_mutable_pminus1() {
  
  return pminus1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_pminus1() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.pMinus1)
  return pminus1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_pminus1(std::string* pminus1) {
  if (pminus1 != nullptr) {
    
  } else {
    
  }
  pminus1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pminus1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.pMinus1)
}

// string qMinus1 = 9;
inline void PailPriv::clear_qminus1() {
  qminus1_.ClearToEmpty();
}
inline const std::string& PailPriv::qminus1() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.qMinus1)
  return _internal_qminus1();
}
inline void PailPriv::set_qminus1(const std::string& value) {
  _internal_set_qminus1(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.qMinus1)
}
inline std::string* PailPriv::mutable_qminus1() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.qMinus1)
  return _internal_mutable_qminus1();
}
inline const std::string& PailPriv::_internal_qminus1() const {
  return qminus1_.Get();
}
inline void PailPriv::_internal_set_qminus1(const std::string& value) {
  
  qminus1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_qminus1(std::string&& value) {
  
  qminus1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.qMinus1)
}
inline void PailPriv::set_qminus1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qminus1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.qMinus1)
}
inline void PailPriv::set_qminus1(const char* value,
    size_t size) {
  
  qminus1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.qMinus1)
}
inline std::string* PailPriv::_internal_mutable_qminus1() {
  
  return qminus1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_qminus1() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.qMinus1)
  return qminus1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_qminus1(std::string* qminus1) {
  if (qminus1 != nullptr) {
    
  } else {
    
  }
  qminus1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qminus1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.qMinus1)
}

// string hp = 10;
inline void PailPriv::clear_hp() {
  hp_.ClearToEmpty();
}
inline const std::string& PailPriv::hp() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.hp)
  return _internal_hp();
}
inline void PailPriv::set_hp(const std::string& value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.hp)
}
inline std::string* PailPriv::mutable_hp() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.hp)
  return _internal_mutable_hp();
}
inline const std::string& PailPriv::_internal_hp() const {
  return hp_.Get();
}
inline void PailPriv::_internal_set_hp(const std::string& value) {
  
  hp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_hp(std::string&& value) {
  
  hp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.hp)
}
inline void PailPriv::set_hp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.hp)
}
inline void PailPriv::set_hp(const char* value,
    size_t size) {
  
  hp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.hp)
}
inline std::string* PailPriv::_internal_mutable_hp() {
  
  return hp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_hp() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.hp)
  return hp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_hp(std::string* hp) {
  if (hp != nullptr) {
    
  } else {
    
  }
  hp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.hp)
}

// string hq = 11;
inline void PailPriv::clear_hq() {
  hq_.ClearToEmpty();
}
inline const std::string& PailPriv::hq() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.hq)
  return _internal_hq();
}
inline void PailPriv::set_hq(const std::string& value) {
  _internal_set_hq(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.hq)
}
inline std::string* PailPriv::mutable_hq() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.hq)
  return _internal_mutable_hq();
}
inline const std::string& PailPriv::_internal_hq() const {
  return hq_.Get();
}
inline void PailPriv::_internal_set_hq(const std::string& value) {
  
  hq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_hq(std::string&& value) {
  
  hq_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.hq)
}
inline void PailPriv::set_hq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.hq)
}
inline void PailPriv::set_hq(const char* value,
    size_t size) {
  
  hq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.hq)
}
inline std::string* PailPriv::_internal_mutable_hq() {
  
  return hq_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_hq() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.hq)
  return hq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_hq(std::string* hq) {
  if (hq != nullptr) {
    
  } else {
    
  }
  hq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.hq)
}

// string qInvP = 12;
inline void PailPriv::clear_qinvp() {
  qinvp_.ClearToEmpty();
}
inline const std::string& PailPriv::qinvp() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.qInvP)
  return _internal_qinvp();
}
inline void PailPriv::set_qinvp(const std::string& value) {
  _internal_set_qinvp(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.qInvP)
}
inline std::string* PailPriv::mutable_qinvp() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.qInvP)
  return _internal_mutable_qinvp();
}
inline const std::string& PailPriv::_internal_qinvp() const {
  return qinvp_.Get();
}
inline void PailPriv::_internal_set_qinvp(const std::string& value) {
  
  qinvp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_qinvp(std::string&& value) {
  
  qinvp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.qInvP)
}
inline void PailPriv::set_qinvp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qinvp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.qInvP)
}
inline void PailPriv::set_qinvp(const char* value,
    size_t size) {
  
  qinvp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.qInvP)
}
inline std::string* PailPriv::_internal_mutable_qinvp() {
  
  return qinvp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_qinvp() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.qInvP)
  return qinvp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_qinvp(std::string* qinvp) {
  if (qinvp != nullptr) {
    
  } else {
    
  }
  qinvp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qinvp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.qInvP)
}

// string pInvQ = 13;
inline void PailPriv::clear_pinvq() {
  pinvq_.ClearToEmpty();
}
inline const std::string& PailPriv::pinvq() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.PailPriv.pInvQ)
  return _internal_pinvq();
}
inline void PailPriv::set_pinvq(const std::string& value) {
  _internal_set_pinvq(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.PailPriv.pInvQ)
}
inline std::string* PailPriv::mutable_pinvq() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.PailPriv.pInvQ)
  return _internal_mutable_pinvq();
}
inline const std::string& PailPriv::_internal_pinvq() const {
  return pinvq_.Get();
}
inline void PailPriv::_internal_set_pinvq(const std::string& value) {
  
  pinvq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PailPriv::set_pinvq(std::string&& value) {
  
  pinvq_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.PailPriv.pInvQ)
}
inline void PailPriv::set_pinvq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pinvq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.PailPriv.pInvQ)
}
inline void PailPriv::set_pinvq(const char* value,
    size_t size) {
  
  pinvq_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.PailPriv.pInvQ)
}
inline std::string* PailPriv::_internal_mutable_pinvq() {
  
  return pinvq_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PailPriv::release_pinvq() {
  // @@protoc_insertion_point(field_release:safeheron.proto.PailPriv.pInvQ)
  return pinvq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PailPriv::set_allocated_pinvq(std::string* pinvq) {
  if (pinvq != nullptr) {
    
  } else {
    
  }
  pinvq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pinvq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.PailPriv.pInvQ)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_paillier_2eproto
