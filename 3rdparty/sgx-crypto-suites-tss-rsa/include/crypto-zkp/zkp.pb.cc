// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zkp.proto

#include "zkp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurvePoint_curve_5fpoint_2eproto;
namespace safeheron {
namespace proto {
class DLogProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DLogProof> _instance;
} _DLogProof_default_instance_;
class HegProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HegProof> _instance;
} _HegProof_default_instance_;
class PailProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PailProof> _instance;
} _PailProof_default_instance_;
class AliceRangeProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AliceRangeProof> _instance;
} _AliceRangeProof_default_instance_;
class DLNProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DLNProof> _instance;
} _DLNProof_default_instance_;
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsscc_info_AliceRangeProof_zkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_AliceRangeProof_default_instance_;
    new (ptr) ::safeheron::proto::AliceRangeProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AliceRangeProof_zkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AliceRangeProof_zkp_2eproto}, {}};

static void InitDefaultsscc_info_DLNProof_zkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_DLNProof_default_instance_;
    new (ptr) ::safeheron::proto::DLNProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DLNProof_zkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DLNProof_zkp_2eproto}, {}};

static void InitDefaultsscc_info_DLogProof_zkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_DLogProof_default_instance_;
    new (ptr) ::safeheron::proto::DLogProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DLogProof_zkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DLogProof_zkp_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_HegProof_zkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_HegProof_default_instance_;
    new (ptr) ::safeheron::proto::HegProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HegProof_zkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HegProof_zkp_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_PailProof_zkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_PailProof_default_instance_;
    new (ptr) ::safeheron::proto::PailProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PailProof_zkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PailProof_zkp_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zkp_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zkp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zkp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zkp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, pk_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, g_r_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLogProof, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, t_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, a3_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, z1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::HegProof, z2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::PailProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::PailProof, y_n_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, z_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, u_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, w_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, s_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, s1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::AliceRangeProof, s2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLNProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLNProof, alpha_arr_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::DLNProof, t_arr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::DLogProof)},
  { 8, -1, sizeof(::safeheron::proto::HegProof)},
  { 17, -1, sizeof(::safeheron::proto::PailProof)},
  { 23, -1, sizeof(::safeheron::proto::AliceRangeProof)},
  { 34, -1, sizeof(::safeheron::proto::DLNProof)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::_DLogProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::_HegProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::_PailProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::_AliceRangeProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::_DLNProof_default_instance_),
};

const char descriptor_table_protodef_zkp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tzkp.proto\022\017safeheron.proto\032\021curve_poin"
  "t.proto\"k\n\tDLogProof\022\'\n\002pk\030\001 \001(\0132\033.safeh"
  "eron.proto.CurvePoint\022(\n\003g_r\030\002 \001(\0132\033.saf"
  "eheron.proto.CurvePoint\022\013\n\003res\030\003 \001(\t\"s\n\010"
  "HegProof\022&\n\001T\030\001 \001(\0132\033.safeheron.proto.Cu"
  "rvePoint\022\'\n\002A3\030\002 \001(\0132\033.safeheron.proto.C"
  "urvePoint\022\n\n\002z1\030\003 \001(\t\022\n\n\002z2\030\004 \001(\t\"\034\n\tPai"
  "lProof\022\017\n\007y_N_arr\030\001 \003(\t\"U\n\017AliceRangePro"
  "of\022\t\n\001z\030\001 \001(\t\022\t\n\001u\030\002 \001(\t\022\t\n\001w\030\003 \001(\t\022\t\n\001s"
  "\030\004 \001(\t\022\n\n\002s1\030\005 \001(\t\022\n\n\002s2\030\006 \001(\t\",\n\010DLNPro"
  "of\022\021\n\talpha_arr\030\001 \003(\t\022\r\n\005t_arr\030\002 \003(\tb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zkp_2eproto_deps[1] = {
  &::descriptor_table_curve_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zkp_2eproto_sccs[5] = {
  &scc_info_AliceRangeProof_zkp_2eproto.base,
  &scc_info_DLNProof_zkp_2eproto.base,
  &scc_info_DLogProof_zkp_2eproto.base,
  &scc_info_HegProof_zkp_2eproto.base,
  &scc_info_PailProof_zkp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zkp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zkp_2eproto = {
  false, false, descriptor_table_protodef_zkp_2eproto, "zkp.proto", 444,
  &descriptor_table_zkp_2eproto_once, descriptor_table_zkp_2eproto_sccs, descriptor_table_zkp_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_zkp_2eproto::offsets,
  file_level_metadata_zkp_2eproto, 5, file_level_enum_descriptors_zkp_2eproto, file_level_service_descriptors_zkp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zkp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zkp_2eproto)), true);
namespace safeheron {
namespace proto {

// ===================================================================

class DLogProof::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& pk(const DLogProof* msg);
  static const ::safeheron::proto::CurvePoint& g_r(const DLogProof* msg);
};

const ::safeheron::proto::CurvePoint&
DLogProof::_Internal::pk(const DLogProof* msg) {
  return *msg->pk_;
}
const ::safeheron::proto::CurvePoint&
DLogProof::_Internal::g_r(const DLogProof* msg) {
  return *msg->g_r_;
}
void DLogProof::clear_pk() {
  if (GetArena() == nullptr && pk_ != nullptr) {
    delete pk_;
  }
  pk_ = nullptr;
}
void DLogProof::clear_g_r() {
  if (GetArena() == nullptr && g_r_ != nullptr) {
    delete g_r_;
  }
  g_r_ = nullptr;
}
DLogProof::DLogProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.DLogProof)
}
DLogProof::DLogProof(const DLogProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res().empty()) {
    res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_res(), 
      GetArena());
  }
  if (from._internal_has_pk()) {
    pk_ = new ::safeheron::proto::CurvePoint(*from.pk_);
  } else {
    pk_ = nullptr;
  }
  if (from._internal_has_g_r()) {
    g_r_ = new ::safeheron::proto::CurvePoint(*from.g_r_);
  } else {
    g_r_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.DLogProof)
}

void DLogProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DLogProof_zkp_2eproto.base);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pk_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&g_r_) -
      reinterpret_cast<char*>(&pk_)) + sizeof(g_r_));
}

DLogProof::~DLogProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.DLogProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DLogProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pk_;
  if (this != internal_default_instance()) delete g_r_;
}

void DLogProof::ArenaDtor(void* object) {
  DLogProof* _this = reinterpret_cast< DLogProof* >(object);
  (void)_this;
}
void DLogProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DLogProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DLogProof& DLogProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DLogProof_zkp_2eproto.base);
  return *internal_default_instance();
}


void DLogProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.DLogProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmpty();
  if (GetArena() == nullptr && pk_ != nullptr) {
    delete pk_;
  }
  pk_ = nullptr;
  if (GetArena() == nullptr && g_r_ != nullptr) {
    delete g_r_;
  }
  g_r_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLogProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint g_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_r(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.DLogProof.res"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DLogProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.DLogProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint pk = 1;
  if (this->has_pk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pk(this), target, stream);
  }

  // .safeheron.proto.CurvePoint g_r = 2;
  if (this->has_g_r()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::g_r(this), target, stream);
  }

  // string res = 3;
  if (this->res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res().data(), static_cast<int>(this->_internal_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.DLogProof.res");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.DLogProof)
  return target;
}

size_t DLogProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.DLogProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res = 3;
  if (this->res().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res());
  }

  // .safeheron.proto.CurvePoint pk = 1;
  if (this->has_pk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pk_);
  }

  // .safeheron.proto.CurvePoint g_r = 2;
  if (this->has_g_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *g_r_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DLogProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.DLogProof)
  GOOGLE_DCHECK_NE(&from, this);
  const DLogProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DLogProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.DLogProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.DLogProof)
    MergeFrom(*source);
  }
}

void DLogProof::MergeFrom(const DLogProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.DLogProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res().size() > 0) {
    _internal_set_res(from._internal_res());
  }
  if (from.has_pk()) {
    _internal_mutable_pk()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_pk());
  }
  if (from.has_g_r()) {
    _internal_mutable_g_r()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_g_r());
  }
}

void DLogProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.DLogProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DLogProof::CopyFrom(const DLogProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.DLogProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLogProof::IsInitialized() const {
  return true;
}

void DLogProof::InternalSwap(DLogProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  res_.Swap(&other->res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DLogProof, g_r_)
      + sizeof(DLogProof::g_r_)
      - PROTOBUF_FIELD_OFFSET(DLogProof, pk_)>(
          reinterpret_cast<char*>(&pk_),
          reinterpret_cast<char*>(&other->pk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DLogProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HegProof::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& t(const HegProof* msg);
  static const ::safeheron::proto::CurvePoint& a3(const HegProof* msg);
};

const ::safeheron::proto::CurvePoint&
HegProof::_Internal::t(const HegProof* msg) {
  return *msg->t_;
}
const ::safeheron::proto::CurvePoint&
HegProof::_Internal::a3(const HegProof* msg) {
  return *msg->a3_;
}
void HegProof::clear_t() {
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
}
void HegProof::clear_a3() {
  if (GetArena() == nullptr && a3_ != nullptr) {
    delete a3_;
  }
  a3_ = nullptr;
}
HegProof::HegProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.HegProof)
}
HegProof::HegProof(const HegProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  z1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_z1().empty()) {
    z1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_z1(), 
      GetArena());
  }
  z2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_z2().empty()) {
    z2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_z2(), 
      GetArena());
  }
  if (from._internal_has_t()) {
    t_ = new ::safeheron::proto::CurvePoint(*from.t_);
  } else {
    t_ = nullptr;
  }
  if (from._internal_has_a3()) {
    a3_ = new ::safeheron::proto::CurvePoint(*from.a3_);
  } else {
    a3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.HegProof)
}

void HegProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HegProof_zkp_2eproto.base);
  z1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  z2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&t_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&a3_) -
      reinterpret_cast<char*>(&t_)) + sizeof(a3_));
}

HegProof::~HegProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.HegProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HegProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  z1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  z2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete t_;
  if (this != internal_default_instance()) delete a3_;
}

void HegProof::ArenaDtor(void* object) {
  HegProof* _this = reinterpret_cast< HegProof* >(object);
  (void)_this;
}
void HegProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HegProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HegProof& HegProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HegProof_zkp_2eproto.base);
  return *internal_default_instance();
}


void HegProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.HegProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  z1_.ClearToEmpty();
  z2_.ClearToEmpty();
  if (GetArena() == nullptr && t_ != nullptr) {
    delete t_;
  }
  t_ = nullptr;
  if (GetArena() == nullptr && a3_ != nullptr) {
    delete a3_;
  }
  a3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HegProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint T = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.CurvePoint A3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_a3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string z1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_z1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.HegProof.z1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string z2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_z2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.HegProof.z2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HegProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.HegProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint T = 1;
  if (this->has_t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::t(this), target, stream);
  }

  // .safeheron.proto.CurvePoint A3 = 2;
  if (this->has_a3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::a3(this), target, stream);
  }

  // string z1 = 3;
  if (this->z1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z1().data(), static_cast<int>(this->_internal_z1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.HegProof.z1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_z1(), target);
  }

  // string z2 = 4;
  if (this->z2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z2().data(), static_cast<int>(this->_internal_z2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.HegProof.z2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_z2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.HegProof)
  return target;
}

size_t HegProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.HegProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string z1 = 3;
  if (this->z1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z1());
  }

  // string z2 = 4;
  if (this->z2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z2());
  }

  // .safeheron.proto.CurvePoint T = 1;
  if (this->has_t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_);
  }

  // .safeheron.proto.CurvePoint A3 = 2;
  if (this->has_a3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a3_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HegProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.HegProof)
  GOOGLE_DCHECK_NE(&from, this);
  const HegProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HegProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.HegProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.HegProof)
    MergeFrom(*source);
  }
}

void HegProof::MergeFrom(const HegProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.HegProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.z1().size() > 0) {
    _internal_set_z1(from._internal_z1());
  }
  if (from.z2().size() > 0) {
    _internal_set_z2(from._internal_z2());
  }
  if (from.has_t()) {
    _internal_mutable_t()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_t());
  }
  if (from.has_a3()) {
    _internal_mutable_a3()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_a3());
  }
}

void HegProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.HegProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HegProof::CopyFrom(const HegProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.HegProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HegProof::IsInitialized() const {
  return true;
}

void HegProof::InternalSwap(HegProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  z1_.Swap(&other->z1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  z2_.Swap(&other->z2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HegProof, a3_)
      + sizeof(HegProof::a3_)
      - PROTOBUF_FIELD_OFFSET(HegProof, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HegProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PailProof::_Internal {
 public:
};

PailProof::PailProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  y_n_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.PailProof)
}
PailProof::PailProof(const PailProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      y_n_arr_(from.y_n_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.PailProof)
}

void PailProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PailProof_zkp_2eproto.base);
}

PailProof::~PailProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.PailProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PailProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PailProof::ArenaDtor(void* object) {
  PailProof* _this = reinterpret_cast< PailProof* >(object);
  (void)_this;
}
void PailProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PailProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PailProof& PailProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PailProof_zkp_2eproto.base);
  return *internal_default_instance();
}


void PailProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.PailProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  y_n_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PailProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string y_N_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_y_n_arr();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.PailProof.y_N_arr"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PailProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.PailProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string y_N_arr = 1;
  for (int i = 0, n = this->_internal_y_n_arr_size(); i < n; i++) {
    const auto& s = this->_internal_y_n_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.PailProof.y_N_arr");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.PailProof)
  return target;
}

size_t PailProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.PailProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string y_N_arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(y_n_arr_.size());
  for (int i = 0, n = y_n_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      y_n_arr_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PailProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.PailProof)
  GOOGLE_DCHECK_NE(&from, this);
  const PailProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PailProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.PailProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.PailProof)
    MergeFrom(*source);
  }
}

void PailProof::MergeFrom(const PailProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.PailProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  y_n_arr_.MergeFrom(from.y_n_arr_);
}

void PailProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.PailProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PailProof::CopyFrom(const PailProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.PailProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PailProof::IsInitialized() const {
  return true;
}

void PailProof::InternalSwap(PailProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  y_n_arr_.InternalSwap(&other->y_n_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PailProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AliceRangeProof::_Internal {
 public:
};

AliceRangeProof::AliceRangeProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.AliceRangeProof)
}
AliceRangeProof::AliceRangeProof(const AliceRangeProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  z_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_z().empty()) {
    z_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_z(), 
      GetArena());
  }
  u_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_u().empty()) {
    u_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_u(), 
      GetArena());
  }
  w_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_w().empty()) {
    w_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_w(), 
      GetArena());
  }
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArena());
  }
  s1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s1().empty()) {
    s1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s1(), 
      GetArena());
  }
  s2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2().empty()) {
    s2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s2(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.AliceRangeProof)
}

void AliceRangeProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AliceRangeProof_zkp_2eproto.base);
  z_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  u_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  w_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AliceRangeProof::~AliceRangeProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.AliceRangeProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AliceRangeProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  z_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  u_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  w_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AliceRangeProof::ArenaDtor(void* object) {
  AliceRangeProof* _this = reinterpret_cast< AliceRangeProof* >(object);
  (void)_this;
}
void AliceRangeProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AliceRangeProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AliceRangeProof& AliceRangeProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AliceRangeProof_zkp_2eproto.base);
  return *internal_default_instance();
}


void AliceRangeProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.AliceRangeProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  z_.ClearToEmpty();
  u_.ClearToEmpty();
  w_.ClearToEmpty();
  s_.ClearToEmpty();
  s1_.ClearToEmpty();
  s2_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AliceRangeProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string z = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_z();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.z"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string u = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_u();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.u"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_w();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.w"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.s"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_s1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.s1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_s2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.AliceRangeProof.s2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AliceRangeProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.AliceRangeProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string z = 1;
  if (this->z().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z().data(), static_cast<int>(this->_internal_z().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.z");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_z(), target);
  }

  // string u = 2;
  if (this->u().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_u().data(), static_cast<int>(this->_internal_u().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.u");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_u(), target);
  }

  // string w = 3;
  if (this->w().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_w().data(), static_cast<int>(this->_internal_w().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.w");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_w(), target);
  }

  // string s = 4;
  if (this->s().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.s");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_s(), target);
  }

  // string s1 = 5;
  if (this->s1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s1().data(), static_cast<int>(this->_internal_s1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.s1");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_s1(), target);
  }

  // string s2 = 6;
  if (this->s2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2().data(), static_cast<int>(this->_internal_s2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.AliceRangeProof.s2");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_s2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.AliceRangeProof)
  return target;
}

size_t AliceRangeProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.AliceRangeProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string z = 1;
  if (this->z().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z());
  }

  // string u = 2;
  if (this->u().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_u());
  }

  // string w = 3;
  if (this->w().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_w());
  }

  // string s = 4;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  // string s1 = 5;
  if (this->s1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s1());
  }

  // string s2 = 6;
  if (this->s2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AliceRangeProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.AliceRangeProof)
  GOOGLE_DCHECK_NE(&from, this);
  const AliceRangeProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AliceRangeProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.AliceRangeProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.AliceRangeProof)
    MergeFrom(*source);
  }
}

void AliceRangeProof::MergeFrom(const AliceRangeProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.AliceRangeProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.z().size() > 0) {
    _internal_set_z(from._internal_z());
  }
  if (from.u().size() > 0) {
    _internal_set_u(from._internal_u());
  }
  if (from.w().size() > 0) {
    _internal_set_w(from._internal_w());
  }
  if (from.s().size() > 0) {
    _internal_set_s(from._internal_s());
  }
  if (from.s1().size() > 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2().size() > 0) {
    _internal_set_s2(from._internal_s2());
  }
}

void AliceRangeProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.AliceRangeProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliceRangeProof::CopyFrom(const AliceRangeProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.AliceRangeProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliceRangeProof::IsInitialized() const {
  return true;
}

void AliceRangeProof::InternalSwap(AliceRangeProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  z_.Swap(&other->z_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  u_.Swap(&other->u_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  w_.Swap(&other->w_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_.Swap(&other->s_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s1_.Swap(&other->s1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s2_.Swap(&other->s2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AliceRangeProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DLNProof::_Internal {
 public:
};

DLNProof::DLNProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alpha_arr_(arena),
  t_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.DLNProof)
}
DLNProof::DLNProof(const DLNProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alpha_arr_(from.alpha_arr_),
      t_arr_(from.t_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.DLNProof)
}

void DLNProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DLNProof_zkp_2eproto.base);
}

DLNProof::~DLNProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.DLNProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DLNProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DLNProof::ArenaDtor(void* object) {
  DLNProof* _this = reinterpret_cast< DLNProof* >(object);
  (void)_this;
}
void DLNProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DLNProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DLNProof& DLNProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DLNProof_zkp_2eproto.base);
  return *internal_default_instance();
}


void DLNProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.DLNProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_arr_.Clear();
  t_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLNProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string alpha_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_alpha_arr();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.DLNProof.alpha_arr"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string t_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_t_arr();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.DLNProof.t_arr"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DLNProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.DLNProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string alpha_arr = 1;
  for (int i = 0, n = this->_internal_alpha_arr_size(); i < n; i++) {
    const auto& s = this->_internal_alpha_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.DLNProof.alpha_arr");
    target = stream->WriteString(1, s, target);
  }

  // repeated string t_arr = 2;
  for (int i = 0, n = this->_internal_t_arr_size(); i < n; i++) {
    const auto& s = this->_internal_t_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.DLNProof.t_arr");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.DLNProof)
  return target;
}

size_t DLNProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.DLNProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string alpha_arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alpha_arr_.size());
  for (int i = 0, n = alpha_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alpha_arr_.Get(i));
  }

  // repeated string t_arr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(t_arr_.size());
  for (int i = 0, n = t_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      t_arr_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DLNProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.DLNProof)
  GOOGLE_DCHECK_NE(&from, this);
  const DLNProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DLNProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.DLNProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.DLNProof)
    MergeFrom(*source);
  }
}

void DLNProof::MergeFrom(const DLNProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.DLNProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alpha_arr_.MergeFrom(from.alpha_arr_);
  t_arr_.MergeFrom(from.t_arr_);
}

void DLNProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.DLNProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DLNProof::CopyFrom(const DLNProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.DLNProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLNProof::IsInitialized() const {
  return true;
}

void DLNProof::InternalSwap(DLNProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alpha_arr_.InternalSwap(&other->alpha_arr_);
  t_arr_.InternalSwap(&other->t_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DLNProof::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::DLogProof* Arena::CreateMaybeMessage< ::safeheron::proto::DLogProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::DLogProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::HegProof* Arena::CreateMaybeMessage< ::safeheron::proto::HegProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::HegProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::PailProof* Arena::CreateMaybeMessage< ::safeheron::proto::PailProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::PailProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::AliceRangeProof* Arena::CreateMaybeMessage< ::safeheron::proto::AliceRangeProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::AliceRangeProof >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::DLNProof* Arena::CreateMaybeMessage< ::safeheron::proto::DLNProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::DLNProof >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
