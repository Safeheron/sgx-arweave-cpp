// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commitment.proto

#include "commitment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurvePoint_curve_5fpoint_2eproto;
namespace safeheron {
namespace proto {
class KGDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KGD> _instance;
} _KGD_default_instance_;
class KGD_NumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KGD_Num> _instance;
} _KGD_Num_default_instance_;
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsscc_info_KGD_commitment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_KGD_default_instance_;
    new (ptr) ::safeheron::proto::KGD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KGD_commitment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KGD_commitment_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_KGD_Num_commitment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::_KGD_Num_default_instance_;
    new (ptr) ::safeheron::proto::KGD_Num();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KGD_Num_commitment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KGD_Num_commitment_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commitment_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_commitment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commitment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commitment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD, y_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD, blindfactor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD_Num, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD_Num, num_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::KGD_Num, blindfactor_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::KGD)},
  { 7, -1, sizeof(::safeheron::proto::KGD_Num)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::_KGD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::_KGD_Num_default_instance_),
};

const char descriptor_table_protodef_commitment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020commitment.proto\022\017safeheron.proto\032\021cur"
  "ve_point.proto\"B\n\003KGD\022&\n\001y\030\001 \001(\0132\033.safeh"
  "eron.proto.CurvePoint\022\023\n\013blindFactor\030\002 \001"
  "(\t\"+\n\007KGD_Num\022\013\n\003num\030\001 \001(\t\022\023\n\013blindFacto"
  "r\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commitment_2eproto_deps[1] = {
  &::descriptor_table_curve_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_commitment_2eproto_sccs[2] = {
  &scc_info_KGD_commitment_2eproto.base,
  &scc_info_KGD_Num_commitment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commitment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commitment_2eproto = {
  false, false, descriptor_table_protodef_commitment_2eproto, "commitment.proto", 175,
  &descriptor_table_commitment_2eproto_once, descriptor_table_commitment_2eproto_sccs, descriptor_table_commitment_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_commitment_2eproto::offsets,
  file_level_metadata_commitment_2eproto, 2, file_level_enum_descriptors_commitment_2eproto, file_level_service_descriptors_commitment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_commitment_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_commitment_2eproto)), true);
namespace safeheron {
namespace proto {

// ===================================================================

class KGD::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& y(const KGD* msg);
};

const ::safeheron::proto::CurvePoint&
KGD::_Internal::y(const KGD* msg) {
  return *msg->y_;
}
void KGD::clear_y() {
  if (GetArena() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
KGD::KGD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.KGD)
}
KGD::KGD(const KGD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blindfactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blindfactor().empty()) {
    blindfactor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blindfactor(), 
      GetArena());
  }
  if (from._internal_has_y()) {
    y_ = new ::safeheron::proto::CurvePoint(*from.y_);
  } else {
    y_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.KGD)
}

void KGD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KGD_commitment_2eproto.base);
  blindfactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_ = nullptr;
}

KGD::~KGD() {
  // @@protoc_insertion_point(destructor:safeheron.proto.KGD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KGD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blindfactor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete y_;
}

void KGD::ArenaDtor(void* object) {
  KGD* _this = reinterpret_cast< KGD* >(object);
  (void)_this;
}
void KGD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KGD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KGD& KGD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KGD_commitment_2eproto.base);
  return *internal_default_instance();
}


void KGD::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.KGD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blindfactor_.ClearToEmpty();
  if (GetArena() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KGD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string blindFactor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blindfactor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.KGD.blindFactor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KGD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.KGD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint y = 1;
  if (this->has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::y(this), target, stream);
  }

  // string blindFactor = 2;
  if (this->blindfactor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blindfactor().data(), static_cast<int>(this->_internal_blindfactor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.KGD.blindFactor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blindfactor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.KGD)
  return target;
}

size_t KGD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.KGD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blindFactor = 2;
  if (this->blindfactor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blindfactor());
  }

  // .safeheron.proto.CurvePoint y = 1;
  if (this->has_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KGD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.KGD)
  GOOGLE_DCHECK_NE(&from, this);
  const KGD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KGD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.KGD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.KGD)
    MergeFrom(*source);
  }
}

void KGD::MergeFrom(const KGD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.KGD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blindfactor().size() > 0) {
    _internal_set_blindfactor(from._internal_blindfactor());
  }
  if (from.has_y()) {
    _internal_mutable_y()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_y());
  }
}

void KGD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.KGD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KGD::CopyFrom(const KGD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.KGD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KGD::IsInitialized() const {
  return true;
}

void KGD::InternalSwap(KGD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blindfactor_.Swap(&other->blindfactor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KGD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KGD_Num::_Internal {
 public:
};

KGD_Num::KGD_Num(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.KGD_Num)
}
KGD_Num::KGD_Num(const KGD_Num& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_num().empty()) {
    num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_num(), 
      GetArena());
  }
  blindfactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blindfactor().empty()) {
    blindfactor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blindfactor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.KGD_Num)
}

void KGD_Num::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KGD_Num_commitment_2eproto.base);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blindfactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KGD_Num::~KGD_Num() {
  // @@protoc_insertion_point(destructor:safeheron.proto.KGD_Num)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KGD_Num::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blindfactor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KGD_Num::ArenaDtor(void* object) {
  KGD_Num* _this = reinterpret_cast< KGD_Num* >(object);
  (void)_this;
}
void KGD_Num::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KGD_Num::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KGD_Num& KGD_Num::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KGD_Num_commitment_2eproto.base);
  return *internal_default_instance();
}


void KGD_Num::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.KGD_Num)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_.ClearToEmpty();
  blindfactor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KGD_Num::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.KGD_Num.num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string blindFactor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blindfactor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.KGD_Num.blindFactor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KGD_Num::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.KGD_Num)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.KGD_Num.num");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_num(), target);
  }

  // string blindFactor = 2;
  if (this->blindfactor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blindfactor().data(), static_cast<int>(this->_internal_blindfactor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.KGD_Num.blindFactor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blindfactor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.KGD_Num)
  return target;
}

size_t KGD_Num::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.KGD_Num)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  // string blindFactor = 2;
  if (this->blindfactor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blindfactor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KGD_Num::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.KGD_Num)
  GOOGLE_DCHECK_NE(&from, this);
  const KGD_Num* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KGD_Num>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.KGD_Num)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.KGD_Num)
    MergeFrom(*source);
  }
}

void KGD_Num::MergeFrom(const KGD_Num& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.KGD_Num)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num().size() > 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.blindfactor().size() > 0) {
    _internal_set_blindfactor(from._internal_blindfactor());
  }
}

void KGD_Num::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.KGD_Num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KGD_Num::CopyFrom(const KGD_Num& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.KGD_Num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KGD_Num::IsInitialized() const {
  return true;
}

void KGD_Num::InternalSwap(KGD_Num* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  num_.Swap(&other->num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blindfactor_.Swap(&other->blindfactor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KGD_Num::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::KGD* Arena::CreateMaybeMessage< ::safeheron::proto::KGD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::KGD >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::KGD_Num* Arena::CreateMaybeMessage< ::safeheron::proto::KGD_Num >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::KGD_Num >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
