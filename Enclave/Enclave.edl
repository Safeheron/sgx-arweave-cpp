/* Enclave.edl - Top EDL file. */

enclave {
    from "tee_util.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_pthread.edl" import *;
    from "sgx_tprotected_fs.edl" import *;
    include "sgx_tprotected_fs.h"
    include "stdio.h"
    include "sgx_report.h"

    trusted {

        /**
         * Create private key shards.
         * [in]pubkey_list the public key list string
         * [in]k the numerator of threshold
         * [in]l the denominator of threshold
         * [in]key_length the key length
         * [out]output the result in Json string format
         */
        public int ecall_create_keyshard([in, string]const char* in_request_id, [in, string]const char* pubkey_list, int k, int l, int key_length, [out] char** output);

        /**
         * Query the status of the key shards creation.
         * [in]pubkey_list the hash of the public key list
         * [out]output the result of the query request
         */
        public int ecall_query_keyshard([string, in]const char* pubkey_list_hash, [out] char** output);

        /**
         * Deallocate a block of memory in enclave.
         */
        public void ecall_free();

        public void ecall_print_enclave_id();

        /**
         * Query if the server is busy.
         */
        public int ecall_is_server_available();

        /**
         * Clear the cache in the map.
         */
        public void ecall_clear_map();

        /**
         * Query if the creation request is repeat.
         */
        public int ecall_if_repeat([string, in]const char* pubkey_list);

        /**
         * Generate the enclave quote.
         * [in]p_qe3_target target information
         * [out]p_report quote result
         * [in]pubkey_list_hash pubkey
         */
        public uint32_t enclave_create_report([in]const sgx_target_info_t* p_qe3_target, [out]sgx_report_t* p_report, [in, string]const char* pubkey_list_hash);
    };

    untrusted {

    };

};